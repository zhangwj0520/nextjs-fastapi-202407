// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostLoginformApiData, PostLoginformApiResponse, PostLoginApiData, PostLoginApiResponse, GetReadUsersMeApiResponse, GetReadOwnItemsApiResponse, GetListUsersApiData, GetListUsersApiResponse, PostCreateUserApiData, PostCreateUserApiResponse, GetGetUserApiData, GetGetUserApiResponse, PutUpdateUserApiData, PutUpdateUserApiResponse, DeleteDeleteUserApiData, DeleteDeleteUserApiResponse, GetRootApiResponse } from './types.gen';

export class LoginService {
    /**
     * Loginform
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static postLoginformApi(data: PostLoginformApiData): CancelablePromise<PostLoginformApiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login-form',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static postLoginApi(data: PostLoginApiData): CancelablePromise<PostLoginApiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UserService {
    /**
     * Read Users Me
     * @returns User Successful Response
     * @throws ApiError
     */
    public static getReadUsersMeApi(): CancelablePromise<GetReadUsersMeApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/me'
        });
    }
    
    /**
     * Read Own Items
     * @returns string Successful Response
     * @throws ApiError
     */
    public static getReadOwnItemsApi(): CancelablePromise<GetReadOwnItemsApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/me/items'
        });
    }
    
    /**
     * List Users
     * @param data The data for the request.
     * @param data.take
     * @param data.skip
     * @returns UsersList Successful Response
     * @throws ApiError
     */
    public static getListUsersApi(data: GetListUsersApiData = {}): CancelablePromise<GetListUsersApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user',
            query: {
                take: data.take,
                skip: data.skip
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Successful Response
     * @throws ApiError
     */
    public static postCreateUserApi(data: PostCreateUserApiData): CancelablePromise<PostCreateUserApiResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User
     * @param data The data for the request.
     * @param data.userId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getGetUserApi(data: GetGetUserApiData): CancelablePromise<GetGetUserApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserWithoutRelations Successful Response
     * @throws ApiError
     */
    public static putUpdateUserApi(data: PutUpdateUserApiData): CancelablePromise<PutUpdateUserApiResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * @param data The data for the request.
     * @param data.userId
     * @returns User Successful Response
     * @throws ApiError
     */
    public static deleteDeleteUserApi(data: DeleteDeleteUserApiData): CancelablePromise<DeleteDeleteUserApiResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class StreamService {
    /**
     * Root
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getRootApi(): CancelablePromise<GetRootApiResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/stream'
        });
    }
    
}