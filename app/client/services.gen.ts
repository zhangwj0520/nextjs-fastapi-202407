// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { LoginFormApiLoginFormPostData, LoginFormApiLoginFormPostResponse, LoginApiLoginPostData, LoginApiLoginPostResponse, ReadUsersMeApiUserMeGetResponse, ReadOwnItemsApiUserMeItemsGetResponse, ListUsersApiUserGetData, ListUsersApiUserGetResponse, CreateUserApiUserPostData, CreateUserApiUserPostResponse, GetUserApiUserUserIdGetData, GetUserApiUserUserIdGetResponse, UpdateUserApiUserUserIdPutData, UpdateUserApiUserUserIdPutResponse, DeleteUserApiUserUserIdDeleteData, DeleteUserApiUserUserIdDeleteResponse, RootApiStreamGetResponse, ReadRootApiDemoGetResponse, ReadItemApiDemoItemsItemIdGetData, ReadItemApiDemoItemsItemIdGetResponse, UpdateItem12ApiDemoItemsItemIdPutData, UpdateItem12ApiDemoItemsItemIdPutResponse, CreateItemApiDemoItemsPostData, CreateItemApiDemoItemsPostResponse, UpdateItemApiDemoItems2ItemIdPutData, UpdateItemApiDemoItems2ItemIdPutResponse, ReadItemsApiDemoItems3QueryGetData, ReadItemsApiDemoItems3QueryGetResponse, ReadItems2ApiDemoItems3DefaultGetData, ReadItems2ApiDemoItems3DefaultGetResponse, ReadItemsDepApiDemoDepGetData, ReadItemsDepApiDemoDepGetResponse, ReadItemsDep22ApiDemoDep2GetData, ReadItemsDep22ApiDemoDep2GetResponse, ListUsersApiPrismaUserGetData, ListUsersApiPrismaUserGetResponse, CreateUserApiPrismaUserPostData, CreateUserApiPrismaUserPostResponse, UpdateUserByidApiPrismaUserPutData, UpdateUserByidApiPrismaUserPutResponse, GetUserApiPrismaUserUserIdGetData, GetUserApiPrismaUserUserIdGetResponse, UpdateUserApiPrismaUserUserIdPutData, UpdateUserApiPrismaUserUserIdPutResponse, DeleteUserApiPrismaUserUserIdDeleteData, DeleteUserApiPrismaUserUserIdDeleteResponse } from './types.gen';

export class LoginService {
    /**
     * Loginform
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginFormApiLoginFormPost(data: LoginFormApiLoginFormPostData): CancelablePromise<LoginFormApiLoginFormPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login-form',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginApiLoginPost(data: LoginApiLoginPostData): CancelablePromise<LoginApiLoginPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UserService {
    /**
     * Read Users Me
     * @returns User_Output Successful Response
     * @throws ApiError
     */
    public static readUsersMeApiUserMeGet(): CancelablePromise<ReadUsersMeApiUserMeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/me'
        });
    }
    
    /**
     * Read Own Items
     * @returns string Successful Response
     * @throws ApiError
     */
    public static readOwnItemsApiUserMeItemsGet(): CancelablePromise<ReadOwnItemsApiUserMeItemsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/me/items'
        });
    }
    
    /**
     * List Users
     * @param data The data for the request.
     * @param data.take
     * @param data.skip
     * @returns UsersList Successful Response
     * @throws ApiError
     */
    public static listUsersApiUserGet(data: ListUsersApiUserGetData = {}): CancelablePromise<ListUsersApiUserGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user',
            query: {
                take: data.take,
                skip: data.skip
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User_Output Successful Response
     * @throws ApiError
     */
    public static createUserApiUserPost(data: CreateUserApiUserPostData): CancelablePromise<CreateUserApiUserPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User
     * @param data The data for the request.
     * @param data.userId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getUserApiUserUserIdGet(data: GetUserApiUserUserIdGetData): CancelablePromise<GetUserApiUserUserIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserWithoutRelations Successful Response
     * @throws ApiError
     */
    public static updateUserApiUserUserIdPut(data: UpdateUserApiUserUserIdPutData): CancelablePromise<UpdateUserApiUserUserIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * @param data The data for the request.
     * @param data.userId
     * @returns User_Output Successful Response
     * @throws ApiError
     */
    public static deleteUserApiUserUserIdDelete(data: DeleteUserApiUserUserIdDeleteData): CancelablePromise<DeleteUserApiUserUserIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class StreamService {
    /**
     * Root
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static rootApiStreamGet(): CancelablePromise<RootApiStreamGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/stream'
        });
    }
    
}

export class DemoService {
    /**
     * Read Root
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readRootApiDemoGet(): CancelablePromise<ReadRootApiDemoGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo'
        });
    }
    
    /**
     * Read Item
     * @param data The data for the request.
     * @param data.itemId
     * @param data.q
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readItemApiDemoItemsItemIdGet(data: ReadItemApiDemoItemsItemIdGetData): CancelablePromise<ReadItemApiDemoItemsItemIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo/items/{item_id}',
            path: {
                item_id: data.itemId
            },
            query: {
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item12
     * @param data The data for the request.
     * @param data.itemId
     * @param data.requestBody
     * @param data.q
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateItem12ApiDemoItemsItemIdPut(data: UpdateItem12ApiDemoItemsItemIdPutData): CancelablePromise<UpdateItem12ApiDemoItemsItemIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/demo/items/{item_id}',
            path: {
                item_id: data.itemId
            },
            query: {
                q: data.q
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Item
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createItemApiDemoItemsPost(data: CreateItemApiDemoItemsPostData): CancelablePromise<CreateItemApiDemoItemsPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/demo/items',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Item
     * @param data The data for the request.
     * @param data.itemId
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static updateItemApiDemoItems2ItemIdPut(data: UpdateItemApiDemoItems2ItemIdPutData): CancelablePromise<UpdateItemApiDemoItems2ItemIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/demo/items2/{item_id}',
            path: {
                item_id: data.itemId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Items
     * @param data The data for the request.
     * @param data.q
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readItemsApiDemoItems3QueryGet(data: ReadItemsApiDemoItems3QueryGetData = {}): CancelablePromise<ReadItemsApiDemoItems3QueryGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo/items3/query',
            query: {
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Items2
     * @param data The data for the request.
     * @param data.q
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readItems2ApiDemoItems3DefaultGet(data: ReadItems2ApiDemoItems3DefaultGetData): CancelablePromise<ReadItems2ApiDemoItems3DefaultGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo/items3/default',
            query: {
                q: data.q
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Items Dep
     * @param data The data for the request.
     * @param data.q
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readItemsDepApiDemoDepGet(data: ReadItemsDepApiDemoDepGetData = {}): CancelablePromise<ReadItemsDepApiDemoDepGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo/dep/',
            query: {
                q: data.q,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Items Dep22
     * @param data The data for the request.
     * @param data.xToken
     * @param data.q
     * @param data.skip
     * @param data.limit
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static readItemsDep22ApiDemoDep2Get(data: ReadItemsDep22ApiDemoDep2GetData): CancelablePromise<ReadItemsDep22ApiDemoDep2GetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/demo/dep2/',
            headers: {
                'x-token': data.xToken
            },
            query: {
                q: data.q,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrismaService {
    /**
     * List Users
     * This endpoint returns a list of users with specified number of records (`take` parameter).
     *
     * :param take: The number of user records to return. Defaults to `10`.
     * :type take: int
     *
     * :return: A list of UserWithoutRelations instances representing the users.
     * :rtype: List[UserWithoutRelations]
     * @param data The data for the request.
     * @param data.take
     * @param data.skip
     * @returns UsersList Successful Response
     * @throws ApiError
     */
    public static listUsersApiPrismaUserGet(data: ListUsersApiPrismaUserGetData = {}): CancelablePromise<ListUsersApiPrismaUserGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/prisma/user',
            query: {
                take: data.take,
                skip: data.skip
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserWithoutRelations Successful Response
     * @throws ApiError
     */
    public static createUserApiPrismaUserPost(data: CreateUserApiPrismaUserPostData): CancelablePromise<CreateUserApiPrismaUserPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/prisma/user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User Byid
     * 根据用户ID更新用户信息。
     *
     * :param user: UserUpdateInput - 用户ID和更新后的用户信息。
     * :return: UserWithoutRelations - 更新后的用户信息。
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserWithoutRelations Successful Response
     * @throws ApiError
     */
    public static updateUserByidApiPrismaUserPut(data: UpdateUserByidApiPrismaUserPutData): CancelablePromise<UpdateUserByidApiPrismaUserPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/prisma/user',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get User
     * @param data The data for the request.
     * @param data.userId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getUserApiPrismaUserUserIdGet(data: GetUserApiPrismaUserUserIdGetData): CancelablePromise<GetUserApiPrismaUserUserIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/prisma/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserWithoutRelations Successful Response
     * @throws ApiError
     */
    public static updateUserApiPrismaUserUserIdPut(data: UpdateUserApiPrismaUserUserIdPutData): CancelablePromise<UpdateUserApiPrismaUserUserIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/prisma/user/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * @param data The data for the request.
     * @param data.userId
     * @returns User_Output Successful Response
     * @throws ApiError
     */
    public static deleteUserApiPrismaUserUserIdDelete(data: DeleteUserApiPrismaUserUserIdDeleteData): CancelablePromise<DeleteUserApiPrismaUserUserIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/prisma/user/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}